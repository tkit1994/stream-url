name: CI
on:
  push:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
      fail-fast: true
    steps:
      - uses: actions/checkout@main

      - uses: Swatinem/rust-cache@master
        with:
          shared-key: ${{matrix.target}}

      - uses: actions-rs/cargo@master
        with:
          use-cross: true
          command: build
          args: --release --all --target ${{matrix.target}}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: stream-url-${{matrix.target}}
          path: |
            target/${{matrix.target}}/release/server
            target/${{matrix.target}}/release/server.exe
            target/${{matrix.target}}/release/cli
            target/${{matrix.target}}/release/cli.exe

      - name: Get tag
        if: "startsWith(github.ref, 'refs/tags/')"
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Create Archive file for windows
        if: startsWith(github.ref, 'refs/tags/') && matrix.target == 'x86_64-pc-windows-gnu'
        run: |
          cd target/${{matrix.target}}/release
          tar czvf stream-url-${{ steps.tag.outputs.tag }}.${{ matrix.target }}.tar.gz server.exe cli.exe

      - name: Create Archive file for linux
        if: startsWith(github.ref, 'refs/tags/') && matrix.target != 'x86_64-pc-windows-gnu'
        run: |
          cd target/${{matrix.target}}/release
          tar czvf stream-url-${{ steps.tag.outputs.tag }}.${{ matrix.target }}.tar.gz server cli

      - name: Upload package to GitHub Release
        uses: softprops/action-gh-release@v1
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          files: target/${{matrix.target}}/release/*.tar.gz
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true

  docker:
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - uses: actions/checkout@main
      - uses: actions/download-artifact@v3
        with:
          name: stream-url-aarch64-unknown-linux-gnu
          path: arm64

      - uses: actions/download-artifact@v3
        with:
          name: stream-url-x86_64-unknown-linux-gnu
          path: amd64

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@master

      - name: Login to DockerHub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: docker build
        uses: docker/build-push-action@master
        with:
          context: .
          push: true
          platforms: |
            linux/arm64
            linux/amd64
          tags: tkit1994/stream-url:latest
